<script>
  // ✅ 너가 준 CSV
  const CSV_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSomhMVou4ceevX5Z4I9CfhA7o1jKNw_oFuimodzuRvcZjc3M_bR_jdD7pkXXwT-hueaneC0p61aDje/pub?gid=2024625464&single=true&output=csv";

  // ➕ /ask?cat=감정
  const params = new URLSearchParams(location.search);
  const wantCat = params.get("cat");

  // --- CSV 파서 (따옴표/콤마 안전) ---
  function parseCSV(text){
    const rows = [];
    let i=0, cur=[], cell="", q=false;
    const pushCell=()=>{ cur.push(cell); cell=""; };
    const pushRow =()=>{ rows.push(cur); cur=[]; };
    while(i<text.length){
      const ch=text[i];
      if(q){
        if(ch==='"'){
          if(text[i+1]==='"'){ cell+='"'; i+=2; continue; }
          q=false; i++; continue;
        } else { cell+=ch; i++; continue; }
      }else{
        if(ch==='"'){ q=true; i++; continue; }
        if(ch===','){ pushCell(); i++; continue; }
        if(ch==='\r'){ i++; continue; }
        if(ch==='\n'){ pushCell(); pushRow(); i++; continue; }
        cell+=ch; i++;
      }
    }
    if(cell.length || cur.length){ pushCell(); pushRow(); }
    // 빈 줄 제거
    return rows.filter(r => r.some(c => (c||"").trim()!==""));
  }

  function toObjects(rows){
    if(!rows.length) return [];
    // BOM 제거 + 트림
    const headers = rows[0].map(h => h.replace(/^\uFEFF/,'').trim());
    const objs = rows.slice(1).map(r => {
      const o={};
      headers.forEach((h,idx)=> o[h]= (r[idx]??"").trim());
      return o;
    });
    return { headers, rows: objs };
  }

  // 헤더 후보군 매핑
  const Q_KEYS = ["Question","질문","question","Q","Question (Title)","질문 내용","내용"];
  const C_KEYS = ["Category","카테고리","category","분류","태그","Tag","tag"];

  // 동적 컬럼 탐지: 후보 없으면 "텍스트가 가장 많은 컬럼"을 질문으로 추정
  function detectColumns(headers, data){
    const lower = headers.map(h=>h.toLowerCase());
    let qIdx = -1, cIdx = -1;

    // 1) 키워드로 탐지
    for(let i=0;i<headers.length;i++){
      if(qIdx<0 && Q_KEYS.some(k => headers[i]===k || lower[i]===k.toLowerCase())) qIdx=i;
      if(cIdx<0 && C_KEYS.some(k => headers[i]===k || lower[i]===k.toLowerCase())) cIdx=i;
    }

    // 2) 그래도 질문을 못 찾으면: 텍스트가 가장 많은 컬럼을 질문으로
    if(qIdx<0){
      let best=-1, bestCount=-1;
      headers.forEach((_,i)=>{
        const count = data.filter(r => (r[headers[i]]||"").trim().length>0).length;
        if(count>bestCount){ bestCount=count; best=i; }
      });
      qIdx = best;
    }

    // 3) 카테고리는 못 찾으면 -1 유지 (없어도 동작)
    return { qIdx, cIdx };
  }

  function normalizeRecords(headers, rows, qIdx, cIdx){
    const QH = headers[qIdx];
    const CH = cIdx>=0 ? headers[cIdx] : null;
    return rows
      .map(r => ({
        Question: (r[QH]||"").trim(),
        Category: CH ? (r[CH]||"").trim() : ""
      }))
      .filter(x => x.Question);
  }

  let DATA = [];

  function pick(arr){ return arr[Math.floor(Math.random()*arr.length)] }

  function render(item){
    const qEl = document.getElementById("q");
    const cEl = document.getElementById("cat");
    if(!item){ qEl.textContent="(질문 없음)"; cEl.textContent=""; return; }
    qEl.textContent = item.Question;
    cEl.textContent = item.Category ? `#${item.Category}` : "";
  }

  function loadRandom(){
    const base = wantCat ? DATA.filter(d => d.Category===wantCat) : DATA;
    const pool = base.length ? base : DATA;
    render(pick(pool));
  }

  async function boot(){
    try{
      const res = await fetch(CSV_URL, { cache: "no-store" });
      if(!res.ok) throw new Error("CSV fetch failed");
      const text = await res.text();
      const matrix = parseCSV(text);
      if(!matrix.length) throw new Error("CSV empty");

      const { headers, rows } = toObjects(matrix);
      // 디버그: 콘솔에서 헤더/샘플 확인 가능
      console.log("[ASK] headers:", headers);
      console.log("[ASK] sample row:", rows[0]);

      const { qIdx, cIdx } = detectColumns(headers, rows);
      console.log("[ASK] detected qIdx/cIdx:", qIdx, cIdx);

      DATA = normalizeRecords(headers, rows, qIdx, cIdx);
      if(!DATA.length) throw new Error("No questions after normalize");

    }catch(e){
      console.warn("[ASK] fallback due to error:", e);
      DATA = [{ Question:"오늘 하루를 별에 비유한다면?", Category:"감정" }];
    }
    loadRandom();
  }

  document.getElementById("again").addEventListener("click", loadRandom);
  document.getElementById("share").addEventListener("click", async () => {
    const q = document.getElementById("q").textContent.trim();
    const t = `⭐ Steady Starry Night — 오늘의 질문\n\n${q}`;
    if(navigator.share){ try { await navigator.share({ text:t }); return; } catch(_){} }
    try{ await navigator.clipboard.writeText(t); alert("질문이 복사되었어요!"); }
    catch{ alert("복사/공유를 지원하지 않는 환경입니다."); }
  });

  boot();
</script>
